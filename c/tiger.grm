%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"
#include "symbol.h"
#include "absyn.h"
int yylex(void); /* function prototype */

A_exp absyn_root; 
void yyerror(const char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}

/* Enable run-time traces (yydebug). */
%define parse.trace

%union {
	int pos;
	int ival;
	string sval;
	A_exp exp;
	A_var var;
	A_expList expList;
	A_efieldList efieldList;
	A_ty ty;
	A_fieldList fieldList;
	A_dec dec;
	A_fundec fundec;
	A_decList decList;
	}

%token <sval> ID STRING
%token <ival> INT

%type <exp> exp program arithmetic_exp function_call negation_exp
%type <exp> comparison_exp boolean_exp record_creation array_creation
%type <exp> assignment_exp if_statement while_loop for_loop let_statement
%type <ty> type
%type <fieldList> type_fields type_fields_extension
%type <expList> expression_sequence exp_seq_tail function_args function_args_tail
%type <var> lvalue
%type <efieldList> record_list record_list_extension
%type <dec> variable_declaration type_declaration declaration
%type <fundec> function_declaration
%type <decList> declaration_sequence

%printer { fprintf(yyo, "Integer: %d", $$); } INT
%printer {
	 switch($$->kind) {
	 case A_simpleVar:
	      fprintf(yyo, "Symbol: %s", $$->u.simple->name);
	      break;
         case A_fieldVar:
	      fprintf(yyo, "Symbol: %s", $$->u.field.sym->name);
	      break;
	 }	
} lvalue

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%nonassoc FOR TO
%nonassoc WHILE DO
%nonassoc THEN
%nonassoc ELSE
%left ASSIGN
%left AND
%left OR
%nonassoc EQ NEQ GT GE LT LE OF
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%start program

%%

/* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 */

program: exp {absyn_root = $1;}

exp: INT {$$=A_IntExp(@1.first_line,$1);}
exp: lvalue {$$ = A_VarExp($1->pos,$1);}
exp: NIL {$$ = A_NilExp(@1.first_line);}
exp: STRING {$$ = A_StringExp(@1.first_line, $1);}
exp: BREAK {$$ = A_BreakExp(@1.first_line);}
exp: LPAREN expression_sequence RPAREN {$$ =A_SeqExp(@1.first_line, $2);}
exp: function_call {$$ = $1;}
exp: arithmetic_exp  {$$ = $1;}
exp: negation_exp {$$ = $1;}
exp: comparison_exp {$$ = $1;}
exp: boolean_exp {$$ = $1;}
exp: record_creation {$$ = $1;}
exp: array_creation {$$ = $1;}
exp: assignment_exp {$$ = $1;}
exp: if_statement {$$ = $1;}
exp: while_loop {$$ = $1;}
exp: for_loop {$$=$1;}
exp: let_statement {$$=$1;}

expression_sequence:  {$$ = (A_expList) NULL;}
expression_sequence: exp exp_seq_tail {$$ = A_ExpList($1, $2);}

exp_seq_tail:  /*empty*/ {$$ = NULL;}
exp_seq_tail: SEMICOLON exp exp_seq_tail {$$ = A_ExpList($2, $3);}

function_call: ID LPAREN function_args RPAREN
	       {$$ = A_CallExp(@1.first_line, S_Symbol($1), $3);} 
	                                    
function_args: /* empty */ {$$ = NULL;}
function_args: exp function_args_tail {$$ = A_ExpList($1, $2);} 

function_args_tail: /*empty*/ {$$ = NULL;} 
function_args_tail: COMMA exp function_args_tail {$$ = A_ExpList($2, $3);}


arithmetic_exp:  exp PLUS exp  {$$=A_OpExp($1->pos, A_plusOp, $1, $3);}
arithmetic_exp:  exp MINUS exp {$$=A_OpExp($1->pos, A_minusOp, $1, $3);}
arithmetic_exp:  exp TIMES exp {$$=A_OpExp($1->pos, A_timesOp, $1, $3);}
arithmetic_exp:  exp DIVIDE exp {$$=A_OpExp($1->pos, A_divideOp, $1, $3);}

negation_exp: MINUS exp %prec UMINUS {$$ = A_OpExp(@1.first_line, A_minusOp, NULL, $2);}

comparison_exp: exp EQ exp {$$=A_OpExp($1->pos, A_eqOp, $1, $3);}
comparison_exp: exp NEQ exp {$$=A_OpExp($1->pos, A_neqOp, $1, $3);}
comparison_exp: exp GT exp {$$ = A_OpExp($1->pos, A_gtOp, $1, $3);}
comparison_exp: exp GE exp {$$ = A_OpExp($1->pos, A_geOp, $1, $3);}
comparison_exp: exp LT exp {$$ = A_OpExp($1->pos, A_ltOp, $1, $3);}
comparison_exp: exp LE exp {$$ = A_OpExp($1->pos, A_leOp, $1, $3);}
		
boolean_exp: exp AND exp {$$ = A_OpExp($1->pos, A_andOp, $1, $3);}
boolean_exp: exp OR exp {$$ = A_OpExp($1->pos, A_orOp, $1, $3);}


record_creation: ID LBRACE record_list RBRACE
		 {$$ = A_RecordExp(@1.first_line, S_Symbol($1), $3); }

record_list: ID EQ exp record_list_extension
	     {$$ =A_EfieldList(A_Efield(S_Symbol($1), $3),
	                   $4);} 
	     
record_list_extension: /*empty*/ {$$= NULL;}
record_list_extension: COMMA ID EQ exp record_list_extension
		       {$$ = A_EfieldList(A_Efield(S_Symbol($2),$4),
			             $5);}        


array_creation: ID LBRACK exp RBRACK OF exp
		{$$ = A_ArrayExp(@1.first_line, S_Symbol($1),
		                 $3, $6);}
		

assignment_exp: lvalue ASSIGN exp {$$ = (@1.first_line, $1, $3);}

if_statement: IF exp THEN exp ELSE exp
	      {$$ = A_IfExp(@1.first_line, $2, $4, $6);}
if_statement: IF exp THEN exp {$$ = A_IfExp(@1.first_line, $2, $4, NULL);}

while_loop: WHILE exp DO exp {$$ = A_WhileExp(@1.first_line, $2, $4);}

for_loop: FOR ID ASSIGN exp TO exp DO exp
	  {$$ = A_ForExp(@1.first_line, S_Symbol($2), $4, $6, $8);}

let_statement: LET declaration_sequence IN expression_sequence END
	       {$$ = A_LetExp(@1.first_line, $2, $4);}

declaration_sequence: /*empty*/ {$$ = NULL;}
declaration_sequence: declaration declaration_sequence
		      {$$ = A_DecList($1, $2);}
		      
declaration: type_declaration     {$$ = $1;}
declaration: variable_declaration {$$ = $1;}
declaration: function_declaration {$$ = A_FunctionDec($1->pos, $1);}

type_declaration: TYPE ID EQ type {$$ = A_TypeDec(@1.first_line,
		                                  A_Namety(S_Symbol($2), $4));}

type: ID {$$ = A_NameTy(@1.first_line, S_Symbol($1));} 
type: LBRACE  type_fields RBRACE {$$ = A_RecordTy(@1.first_line, $2);}
type: ARRAY OF ID {$$ = A_ArrayTy(@1.first_line, S_Symbol($3));}

type_fields: /*empty*/ {$$ = NULL;}
type_fields: ID COLON ID type_fields_extension
	     {$$ = A_FieldList(A_Field(@1.first_line, S_Symbol($1), S_Symbol($3)),
	     	                $4);}

type_fields_extension: /*empty*/ {$$ = NULL;}
type_fields_extension: COMMA ID COLON ID  type_fields_extension
		       {$$ = A_FieldList(A_Field(@1.first_line, S_Symbol($2), S_Symbol($4)), $5);}

variable_declaration: VAR ID ASSIGN exp {$$ = A_VarDec(@1.first_line, S_Symbol($2), NULL, $4);}
variable_declaration: VAR ID COLON ID ASSIGN exp
		      {$$ = A_VarDec(@1.first_line, S_Symbol($2), S_Symbol($4), $6);}

function_declaration: FUNCTION ID LPAREN type_fields RPAREN EQ exp
		      {$$ = A_Fundec(@1.first_line, S_Symbol($2), $4, NULL, $7);}
function_declaration: FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ exp
		      {$$ = A_Fundec(@1.first_line, S_Symbol($2), $4, S_Symbol($7)	                              ,$9);}

lvalue: ID {$$ = A_SimpleVar(@1.first_line, S_Symbol($1));}
lvalue: lvalue DOT ID {$$ = A_FieldVar($1->pos, $1, S_Symbol($3));}
lvalue: lvalue LBRACK exp RBRACK {$$ = A_SubscriptVar($1->pos, $1, $3);}

%%

